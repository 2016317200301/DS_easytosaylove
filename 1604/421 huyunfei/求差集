
#include<iostream>
#include<assert.h>
using namespace std;
struct Node
{
    int _data;
    Node*next;

    Node(int data)
        :_data(data)
        , next(NULL)
    {}
};
void Different(Node**A, Node*B)
{
    Node*pa = *A;//用来遍历A链表
    //Node*pb = B;//用来遍历B链表
    Node *prev = NULL;//用来保存删除后节点能连接起来
    Node*del;//待删除的节点
    while (pa)
    {
        Node*pb = B;
        while (pb&&pa->_data != pb->_data)
            pb = pb->next;//
        if (pb)//两个节点的值相等
        {
            if (!prev)
            {
                *A = pa->next;//指向下一个节点
            }
            else//第一个节点相等
            {
                prev->next = pa->next;//指向相等节点的后一个
            }
            del = pa;//删除的节点
            pa = pa->next;
            delete del;
        }
        //此时链表B已经遍历完了
        else
        {
            //更新节点的位置
            prev = pa;
            pa = pa->next;
        }
    }
}
void Printf(Node*root)
{
    Node*cur = root;
    while(cur)
    {
        cout << cur->_data << " ";
        cur = cur->next;
    }
    cout << endl;
}
void Test()
{
    Node*n1 = new Node(5);
    Node*n2 = new Node(10);
    Node*n3 = new Node(20);
    Node*n4 = new Node(15);
    Node*n5 = new Node(25);
    Node*n6 = new Node(30);

    n1->next = n2;
    n2->next = n3;
    n3->next = n4;
    n4->next = n5;
    n5->next = n6;
    cout << "链表A" << endl;
    Printf(n1);

    Node*n11 = new Node(5);
    Node*n22 = new Node(15);
    Node*n33 = new Node(35);
    Node*n44 = new Node(25);

    n11->next = n22;
    n22->next = n33;
    n22->next = n33;
    n33->next = n44;
    cout << "链表B" << endl;

    Printf(n11);
    cout << "链表的差集" << endl;

    Different(&n1, n11);
    Printf(n1);
}

int main()
{
    Test();
    return 0;
}
