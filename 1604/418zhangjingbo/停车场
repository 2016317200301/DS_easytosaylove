#include<stdio.h>
#include<stdlib.h>
#define MAXSIZE 100
#define TRUE 1
#define FALSE 0

//全局变量记录过道车数量
int num=1;
//顺序栈表示停车场
typedef struct Stack {
	int license[MAXSIZE];
	int time[MAXSIZE];
	int top;
}SeqStack;

//链队列表示过道
typedef struct Node {
	int license;
	struct Node *next;
}LinkQueueNode;

typedef struct {
	LinkQueueNode *front;
	LinkQueueNode *rear;
}LinkQueue;


//初始化顺序栈
void InitStack(SeqStack *S) {
	S->top = -1;
}

//顺序栈进栈
int Push(SeqStack *S, int x,int t) {
	if (S->top == MAXSIZE - 1) {
		return  (FALSE);	//栈满
	}
	S->top++;
	S->license[S->top] = x;
	S->time[S->top] = t;
	return (TRUE);
}

//顺序栈出栈
int Pop(SeqStack *S, int *x,int *t) {
	if (S->top == -1) {
		//栈空
		return (FALSE);
	}
	else {
		*x = S->license[S->top];
		*t = S->time[S->top];
		S->top--;
		return (TRUE);
	}
}

//顺序栈读栈顶并返回栈顶位置
int GetTop(SeqStack *S, int *x,int *t) {
	if (S->top == -1) {
		return -1;
	}
	else {
		*x = S->license[S->top];
		*t = S->time[S->top];
		return S->top;
	}
}

//链队列初始化
int InitQueue(LinkQueue *Q) {
	Q->front = (LinkQueueNode*)malloc(sizeof(LinkQueueNode));
	if (Q->front != NULL) {
		Q->rear = Q->front;
		Q->front->next = NULL;
		return (TRUE);
	}
	else return (FALSE);	//溢出
}

//链队列入队
int EnterQueue(LinkQueue *Q, int x) {
	LinkQueueNode *NewNode;
	NewNode = (LinkQueueNode*)malloc(sizeof(LinkQueueNode));
	if (NewNode != NULL) {
		NewNode->license = x;
		NewNode->next = NULL;
		Q->rear->next = NewNode;
		Q->rear = NewNode;
		num++; //数字+1
		return (TRUE);
	}
	else {
		return (FALSE);
	}
}

//链队列出队
int DeleteQueue(LinkQueue *Q, int *x) {
	LinkQueueNode *p;
	if (Q->front == Q->rear) {
		return (FALSE);
	}
	p = Q->front->next;
	Q->front->next = p->next;
	if (Q->rear == p) {
		Q->rear = Q->front;
	}
	*x = p->license;
	num--; //数字减一
	free(p);
	return(TRUE);
}


int main() {
	SeqStack *s, *temp;
	LinkQueue q;
	int flag, n, license, time;
	int top,t;
	s = (SeqStack*)malloc(sizeof(SeqStack));
	temp = (SeqStack*)malloc(sizeof(SeqStack));
	InitStack(s);
	InitStack(temp);
	InitQueue(&q);

	while (1) {
		printf("输入标识(1表示到达 2表示离开) 车牌 时刻\n");
		scanf("%d %d %d", &flag,&license,&time);
		if (flag == 1) {
			//到达
			if (Push(s, license, time)) {
				//停车场未满
				top = GetTop(s, &n, &t);
				printf("到达的车辆在停车场的位置是%d\n", top);
			}
			else {
				//停车场已满
				if (EnterQueue(&q, license)) {
					//过道未满
					printf("到达的车辆在便道的位置是%d\n", num);
				}
			}
		}
		else if (flag == 2) {
			//离开
			while (1) {
				top = GetTop(s, &n, &t);
				if (n == license) {
					//找到目标车牌
					printf("离开的车辆停留了%d时间,应交%d元\n", time - t, time - t);
					Pop(s, &n, &t);
					break;
				}
				Pop(s, &n, &t);
				Push(temp, n, t);
			}
			while (Pop(temp, &n, &t)) {
				Push(s, n, t);
			}
			if (DeleteQueue(&q, &n)) {
				//便道上车进入停车场
				Push(s, n, time);
			}
		}
	}
	return 0;
}
